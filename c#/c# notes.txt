Comments
--------
// - single line Comments
/* */ - multiline Comments.

Variables
---------
Commonly used datatypes are 
int
double 
char : to store single character. If you need to store more than one character you need to specify the size.
string : used to store strings.
bool

typename Variable = value;

Constants
---------
const keyword is used to create constant. The Variables defined with const cannot be changed.
const variableName = value;

C# is case sensitive.
- variable names can have letters, digits and underscore
- Names must begin with a letter or an underscore.
- variable names are often started with small letters. if there are more than one word the first letter of the second word is capitalized.

int - 4 bytes
long - 8 bytes
float -4 bytes
char - 2bytes per character
string - 2 bytes per character.

Type casting
------------
Implicit casting : Automatic conversion from lower sized type to higher sized type (eg: from float to double).
Explicit casting : Manual casting to supported type.
    Convert class is used for this. 
    Convert.ToString(), Convert.ToInt32(), Convert.ToInt64();

To get user input we use:
-------------------------
Console.ReadLine(); - function. The accepted value should be converted to the required type. By default string is accepted.

Operators
---------
Arithematic
Logical
Relational

If you want to find the length of a string we can use .length property.
.ToUpper()
.ToLower()
For converting to lower and upper case.

+ is used to concatenate strings.
string.Concat(firstString, secondString) is a function used for concatenating two strings.

SubString is used to extract a substring from a string.
string.Substring(startIndex, length) is a function used for extracting substring from a string.

indexOf is used to find the index of a character in a string.
string.IndexOf(char) is a function used for finding the index of a character in a string.

\ is used to escape special characters in a string.
\' single quote escape character
\\ backslash escape character
\" double quote escape character
\n new line character
\t tab character
\b backspace character
\r carriage return character

Conditional Statements
----------------------
if-else
switch-case

Loops
-----
for
while
do-while
foreach (used to iterate over a collection)
foreach(type variable in collection){}

OOPS
----
Abstraction
Encapsulation
Inheritance
Polymorphism

are the 4 pillars of OOPS.

Advantages of OOPS
-
1. Reusability : We can use the code written for one class in another class. It let's us avoid DRY (Don't Repeat Yourself) principle.
2. Modularity : We can divide the code into smaller, more manageable modules thus increasing the maintainability of the code.
3. Encapsulation : We can hide the implementation details of a class and provide a public interface to the outside world.
4. Inheritance : We can create a new class by deriving from an existing class.
5. Polymorphism : We can write code that can work with objects of different classes.

Class:
------
Class is a blueprint for creating objects. It defines the properties and methods of an object. Each object created from the class is an instance of the class.
Class have properties and methods.

The initialization of the class is done using the constructor using the new operator.

eg:
MyClass myObject = new MyClass();

Access specifiers are used to control the access to the members of a class. The main access modifiers in C# are public, private, protected, internal.

public - accessible from anywhere in the program.
private - accessible only within the class.
protected - accessible from the class and its derived classes. To access the properties and methods of the base class we need to create an object of the 
base child class and call the method of the superclass if you are trying to do it from the base class. We cannot access the protected members of the base class directly from outside of the derived class.
internal - accessible from the same assembly.

constructor: A special method that is called when an object of the class is created. It is used to initialize the object's properties.
constructors are of 2 types default constructor and parameterized constructor.

default constructor: A constructor that does not take any arguments. It is called when an object of the class is created without any arguments.

parameterized constructor: A constructor that takes arguments. It is used to initialize the object's properties with the values passed as arguments.

Assembly is a collection of classes, interfaces, and other types that are built into a single file and can be referenced by other programs. 
Namespaces: A namespace is a container for organizing classes and other types. It helps to avoid naming conflicts between different classes and types.

properties
----------
A property is like a combination of a variable and method, it has two methods get and set.

get - used to get the value of the property.
set - used to set the value of the property.

eg:
class Person{
    private string name;
    public string Name{
        get{
            return name;
        }
        set{
            name = value;
        }
    }
}

Encapsulation:
--------------
When you want to hide the implementation of a class from outside world, encapsulation is used. It is done using access modifiers.

Abstraction:
------------
Data abstraction is the process of hiding the complex details of a system and showing only the necessary information to the user.
Abstraction is achieved by hiding the internal details of an object and showing only the necessary information to the user.
It is done using abstract classes, interfaces, and abstract methods.

abstract keyword is used with classes and functions.
abstract class - a class that cannot be instantiated. You cannot create an object of an abstract class.
abstract method - a method that does not have an implementation. It is declared in an abstract class and must be implemented in the derived classes.

abstract classes can have abstract methods and non-abstract methods.


Inheritance:
------------
Inheritance is the process of creating a new class by deriving from an existing class. The new class is called the derived class, and the existing class is called the base class or parent class.

The derived class inherits the properties and methods of the base class. It can also add its own properties and methods.

eg:
class Animal{
    public void Eat(){
        Console.WriteLine("Animal is eating");
    }
}

class Dog : Animal{
    public void Bark(){
        Console.WriteLine("Dog is barking");
    }
}

syntax:
class DerivedClassName : BaseClassName{
    //code
}
Polymorphism:
-------------
Polymorphism is the ability of an object to take on multiple forms. It allows us to write code that can work with objects of different classes.
Polymorphism is achieved using method overloading, method overriding, and interfaces.
Interfaces allows us to have multiple Inheritance. In other cases we use method overloading and method overriding.

In abstract classes, we can have abstract methods and non-abstract methods. In derived classes, we can implement the abstract methods and override the non-abstract methods.
We must use the override keyword to override the base class method before the method.

Enums:
------
Enums are used to define a set of named integer constants.

Syntax:
enum EnumName{
    Value1,
    Value2,
    Value3
}We can access the values of the enums using the name of the enum.

eg: 
enum Days{
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday
}   

Exception
----------
Exceptions are errors that occur during the execution of a program.

Exceptions are handled using try-catch blocks.

try{
    //code that may throw an exception    
}
catch(ExceptionType e){ //ExceptionType is the type of exception that we want to catch
    //code to handle the exception
}
finally{                
    //code that will always be executed, whether an exception is thrown or not.
}

Exception Types:
-    SystemException - base class for all exceptions.
-    ArgumentException - thrown when an argument is not valid.
-    InvalidOperationException - thrown when an operation is not valid for the current state of the object.
-    NullReferenceException - thrown when an object is null.
-    IndexOutOfRangeException - thrown when an index is out of range.
-    DivideByZeroException - thrown when a division by zero occurs.
-    StackOverflowException - thrown when the stack overflows.
-    OutOfMemoryException - thrown when there is not enough memory to allocate an object.   
We must make sure that we place the base class of the exception in the last catch block.