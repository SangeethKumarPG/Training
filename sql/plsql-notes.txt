LOOPS
------














Arrays
------
An array is a colleciton type data. We call the array in PLSQL as VARRAY. The indexing of the array 
starts from 1. We use the CREATE TYPE for also creating an array.
We must specify the size and datatype of the array.

syntax:
CREATE OR REPLACE TYPE varray_type_name IS VARRAY(n) of <element_type>;
OR
TYPE array_name IS VARRAY(n) OF <element_type>;

We can also use TABLE OF keyword to define arrays if we don't want to decalre the size of the array beforehand
eg:
TYPE MY_ARRAY IS TABLE OF VARCHAR2(40);
MY_COLORS MY_ARRAY := MY_ARRAY(NULL, NULL, NULL);

Cursors
-------
Oracle creates a memory area known as context area for processing an SQL statement, which contains all the information. 
It is a context area where all the data of our queries are stored. It is an anonymous block. Oracle have 2 engines.
For smaller queries the SQL engine will execute it directly. For tasks like  procedures the PLSQL engine is used. 
A cursor is used to access and control the context area. 
For DML statements a cursor is automatically created. This type of cursor is called Implicit cursor. Implicit cursors 
have default attributes like %FOUND, %ISOPEN, %ROWCOUNT etc.

Explicit cursors are program defined cursors. It is used to gain more control over the context area. 
We need to declare a cursor, initializing the cursor, opening the cursor and finally closing the cursor.


procedures
----------
A subprogram is a program unit that performs a particular task. These subprograms are combined to form a larger program.
A subprogram can be invoked by another subprogram or program which is called the calling program.
We can create them and run them at any time. We don't need to compile the program everytime.

A subprogram can be created at schema level, inside a package, inside a plsql block.

At the schema level a subprogram is a standalone program. It is created with CREATE PROCEDURE or CREATE FUNCTION
statement. it can be deleted with DROP PROCEDURE or DROP FUNCTION.

A subprogram created inside a package is a packaged subprogram. It is stored in the database and can be deleted when the package
is deleted with DROP PACKAGE statement. 

NOTE: A Function must return a value. in other cases if we don't need to return values we use procedures.

In procedures we have 3 type of parameters IN parameter, OUT paramater and IN OUT parameter.
IN OUT parameter can be used as input and output.

IN parameter is optional. OUT and IN OUT are mandatory for parameters.

functions
---------




Triggers
--------
We create triggers on insert update delete. We can choose to either activate the trigger before or after these operations.
DBAs can create triggers for operations on SERVERERROR, LOGON, LOGOFF, STARTUP etc.

We can create triggers on table, views, schema etc.
We don't need to explicitly call the triggers.

To create backup table we use :
CREATE TABLE emp_backup as SELECT * FROM emp;

:old is a keyword used to get the old value of the previous column.
:new is also a keyword used to check if it a new value of the column.
eg:
CREATE OR REPLACE TRIGGER tgr_del_emp BEFORE DELETE ON emp FOR EACH ROW
BEGIN
    INSERT INTO emp_backup VALUES(:old.empno, :old.ename, :old.job, old:mgr, :old.hiredate, :old.sal, :old.comm, :old.deptno);
END;

ALTER TABLE table_name DISABLE ALL TRIGGERS; --- To disable all triggers
 
ALTER TABLE table_name ENABLE ALL TRIGGERS; --- To enable all triggers

ALTER TRIGGER trigger_name ENABLE; --To enable a enable a trigger of the specified name.

ALTER TRIGGER trigger_name DISABLE; -- To disable a trigger of the specified name.

Exceptions
-----------




views & instead of trigger
--------------------------
Used for displaying data without tampering the data in the table. Views act like table, we can query the views like that of a table.
A view is a virtual table. Views can be created on single tables or by combining multiple tables (using join statements).
On views if you need to update or insert values into tables(if there are multiple tables used to create a view) we need a trigger for that.
If there are single table table view we can directly insert or update into the original table.

To do so we need to use INSTEAD OF Trigger.


-- don't work beacuse we cannot insert values through views into multiple tables by default
insert into EMP_X_DEPT VALUES(7722, 'KUMAR', 'ANALYST', '02/02/2000', 3500, 100, 30, 'SALES', 'CHICAGO');


 
CREATE OR REPLACE TRIGGER trg_empdp_vw INSTEAD OF INSERT ON EMP_X_DEPT
DECLARE
check_exists number;
BEGIN
   SELECT COUNT(*) INTO check_exists FROM DEPT D WHERE D.DEPTNO=:NEW.DEPTNO;
   IF check_exists = 0 THEN
      INSERT INTO DEPT(DEPTNO,DNAME, LOC) VALUES (:NEW.DEPTNO, :NEW.DNAME, :NEW.LOC);
   END IF;
   INSERT INTO EMP(EMPNO, ENAME, JOB, HIREDATE, SAL, COMM, DEPTNO) VALUES (:NEW.EMPNO, :NEW.ENAME, :NEW.JOB, :NEW.HIREDATE, :NEW.SAL, :NEW.COMM, :NEW.DEPTNO);
END;

-- works
insert into EMP_X_DEPT VALUES(7722, 'KUMAR', 'ANALYST', '02/02/2000', 3500, 100, 30, 'SALES', 'CHICAGO');

SELECT * FROM EMP_X_DEPT;
SELECT * FROM EMP;
SELECT * FROM DEPT;

Packages
--------
placing related functions, procedures etc together so that we can store them and access them easily. Package is a schema object.
Package have 2 parts.
1. Package specification : specify the name, input and output parameters. It is like an interface. All variables defined in here is called public object.
2. Package body or defenition : All the logic is placed in this.

CREATE OR REPLACE PACKAGE package_name IS
    - public type declarations
    - public cursor declarations
END;

to create a package body
CREATE OR REPLACE PACKAGE BODY package_name IS 
    - function defenitions, procedures etc
END package_name;

For procedures and functions we don't need to specify the REPLACE keyword in the defenition of the procedures.

NOTE: When defining procedure in packge we must use IS instead of AS.

Records & colleciton
--------------------
Record is a datastructure that can hold multiple items of different kinds. Records consists of different fields 
similar to a row of a database. 
PLSQL can handle the following types of Records:
- Table based : Can fetch only one record at a time. 
- Cursor based.
- User-defined records.

To access any field of the record we use the (.) dot operator.

A collection is an ordered group of elements having the same data type. Each element is identifed by the unique subscript of
it's position in the collection.

Bulk collections
----------------
Bulk collection reduces context switches between sql and plsql engine. It allows to fetch many records at a time.
It is faster.
It can be used instead of a cursor to fetch multiple rows at once.
eg:
DECLARE
    TYPE emp_record_type  IS RECORD(ename VARCHAR2(10), empno NUMBER(4), sal NUMBER(7,2));
    TYPE table_record_type IS TABLE of emp_record_type;
    table_emp_record table_record_type;
    BEGIN
        SELECT ename, empno, sal BULK COLLECT INTO table_emp_record FROM emp;
        DBMS_OUTPUT.PUT_LINE('Employee Data');
        FOR i IN table_emp_record.FIRST..table_emp_record.LAST
        LOOP
            DBMS_OUTPUT.PUT_LINE(table_emp_record(i).empno||' : '||table_emp_record(i).ename||' is having salary of $'||table_emp_record(i).sal);
            DBMS_OUTPUT.NEW_LINE();
        END LOOP;
    END;

Collection Methods
------------------
EXIST(n) : if nth element exist in a collection
LIMIT : checks the size limit of the collection.
NEXT(n) : Returns the index number succeeding to number name
PRIOR(n): 
EXTEND(n) : Adds n null elements to a colleciton
EXTEND(n,i) : Adds n copies of i into the colleciton.

Transactions
------------
All the operations we do on the table or schema is a transaction. If you want modify that we use keywords like
COMMIT, ROLLBACK, SAVEPOINT etc.
A transaction is atomic. A transaction should be either committed or either rolled back. 
A successfully executed SQL statements doesn't mean that a transaction is commited.
Unless a transaction is committed SQL queries can be rolled back.
For DDL statements such as create COMMIT is not required.
For DCL statements such as GRANT COMMIT is used.

You can rollback completely or to a savepoint. 
savepoint is useful in long transactions if you want to place a marker which you can move incase of a failure.
You can have multiple savepoints in a transaction.
SAVEPOINT savepoint_name;

To execute a COMMIT automatically on INSERT, UPDATE or DELETE commands is executed, you can set the 
AUTOCOMMIT environment variables as -
SET AUTOCOMMIT ON;
SET AUTOCOMMIT OFF; 
etc.

Query Optimization
------------------
Indexes are used for increasing the performance of queries. Indexes are set on columns which are frequently used in where clause.

There are different types of indexes in Oracle
1. Unique index : created on unique value columns such as primary keys.
2. Bitmap index : It is created on columns whose values are distinct like yes/no, male/female etc. Matched values will be mapped to 1 and others to 0. Need special permission for creating index.
3. Composite index : more than once column is selected for creating an index
4. Function index : It is created with the functions used in query statements. 

To check if there are indexes on a table we can use 
select * from all_indexes where table_name = 'table_name';

The explain plan window in plsql developer shows the cost, time  for each query. It will show the operations performed for each query.
According the complexity(number of conditions) of the query the cost of the query is increased. We must try to reduce the cost of the query.
Once you add the indexes the cost will be reduced automatically.

To create index :
create unique index index_name on table_name(column_name);

create index index_name on table_name(column1,column2);

create bitmap index index_name on table_name(column);

create index index_name on table_name(function_name(column)); 

Partitions
-----------
When you have large tables we use partition functions. 
