LOOPS
------














Arrays
------
An array is a colleciton type data. We call the array in PLSQL as VARRAY. The indexing of the array 
starts from 1. We use the CREATE TYPE for also creating an array.
We must specify the size and datatype of the array.

syntax:
CREATE OR REPLACE TYPE varray_type_name IS VARRAY(n) of <element_type>;
OR
TYPE array_name IS VARRAY(n) OF <element_type>;

We can also use TABLE OF keyword to define arrays if we don't want to decalre the size of the array beforehand
eg:
TYPE MY_ARRAY IS TABLE OF VARCHAR2(40);
MY_COLORS MY_ARRAY := MY_ARRAY(NULL, NULL, NULL);

Cursors
-------
Oracle creates a memory area known as context area for processing an SQL statement, which contains all the information. 
It is a context area where all the data of our queries are stored. It is an anonymous block. Oracle have 2 engines.
For smaller queries the SQL engine will execute it directly. For tasks like  procedures the PLSQL engine is used. 
A cursor is used to access and control the context area. 
For DML statements a cursor is automatically created. This type of cursor is called Implicit cursor. Implicit cursors 
have default attributes like %FOUND, %ISOPEN, %ROWCOUNT etc.

Explicit cursors are program defined cursors. It is used to gain more control over the context area. 
We need to declare a cursor, initializing the cursor, opening the cursor and finally closing the cursor.


procedures
----------
A subprogram is a program unit that performs a particular task. These subprograms are combined to form a larger program.
A subprogram can be invoked by another subprogram or program which is called the calling program.
We can create them and run them at any time. We don't need to compile the program everytime.

A subprogram can be created at schema level, inside a package, inside a plsql block.

At the schema level a subprogram is a standalone program. It is created with CREATE PROCEDURE or CREATE FUNCTION
statement. it can be deleted with DROP PROCEDURE or DROP FUNCTION.

A subprogram created inside a package is a packaged subprogram. It is stored in the database and can be deleted when the package
is deleted with DROP PACKAGE statement. 

NOTE: A Function must return a value. in other cases if we don't need to return values we use procedures.

In procedures we have 3 type of parameters IN parameter, OUT paramater and IN OUT parameter.
IN OUT parameter can be used as input and output.

IN parameter is optional. OUT and IN OUT are mandatory for parameters.

functions
---------




Triggers
--------
We create triggers on insert update delete. We can choose to either activate the trigger before or after these operations.
DBAs can create triggers for operations on SERVERERROR, LOGON, LOGOFF, STARTUP etc.

We can create triggers on table, views, schema etc.
We don't need to explicitly call the triggers.

To create backup table we use :
CREATE TABLE emp_backup as SELECT * FROM emp;

:old is a keyword used to get the old value of the previous column.

eg:
CREATE OR REPLACE TRIGGER tgr_del_emp BEFORE DELETE ON emp FOR EACH ROW
BEGIN
    INSERT INTO emp_backup VALUES(:old.empno, :old.ename, :old.job, old:mgr, :old.hiredate, :old.sal, :old.comm, :old.deptno);
END;

ALTER TABLE table_name DISABLE ALL TRIGGERS; --- To disable all triggers
 
ALTER TABLE table_name ENABLE ALL TRIGGERS; --- To enable all triggers

ALTER TRIGGER trigger_name ENABLE; --To enable a enable a trigger of the specified name.

ALTER TRIGGER trigger_name DISABLE; -- To disable a trigger of the specified name.

Exceptions
-----------
